{"version":3,"sources":["components/Task/task.js","components/TasksList/tasksList.js","components/Pagination/pagination.js","components/CreateTask/createTask.js","components/Navbar/navbar.js","App.js","serviceWorker.js","index.js"],"names":["Task","state","text","props","task","status","id","handleInputChange","e","name","target","value","type","checked","setState","handleEditSuccess","preventDefault","onEditSuccess","this","key","className","style","width","username","email","onSubmit","isLogged","onChange","color","Component","TaskList","handleSubmit","updateTask","tasks","map","Pagination","max","page","func","pages","i","classes","push","onClick","Math","ceil","makePage","total_task_count","pickPage","INITIAL_STATE","CreateTask","createNewTask","required","password","Navbar","userLogin","aria-label","App","sort_field","sort_direction","token","getData","url","axios","get","then","res","data","message","changeSelect","formData","FormData","append","post","headers","user","find","t","taskToUpdate","console","log","Number","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oSAEqBA,G,iNACjBC,MAAQ,CACJC,KAAM,EAAKC,MAAMC,KAAKF,KACtBG,OAAQ,EAAKF,MAAMC,KAAKC,OACxBC,GAAI,EAAKH,MAAMC,KAAKE,I,EAGxBC,kBAAoB,SAAAC,GAChB,IAAMC,EAAOD,EAAEE,OAAOD,KAChBE,EAA0B,aAAlBH,EAAEE,OAAOE,KAAsBJ,EAAEE,OAAOG,QAAUL,EAAEE,OAAOC,MAEzE,EAAKG,SAAL,eAAiBL,EAAOE,K,EAG5BI,kBAAoB,SAAAP,GAChBA,EAAEQ,iBAEF,EAAKb,MAAMc,cAAc,EAAKhB,Q,wEAGvB,IACAG,EAAQc,KAAKf,MAAbC,KACP,OACI,wBAAIe,IAAKf,EAAKE,GAAIc,UAAU,OAExB,yBAAKA,UAAU,OAAOC,MAAO,CAACC,MAAO,UACjC,yBAAKF,UAAU,aACX,wBAAIA,UAAU,cAAchB,EAAKmB,UACjC,wBAAIH,UAAU,iCAAiChB,EAAKoB,OACpD,0BAAMC,SAAUP,KAAKH,mBAEQ,KAAxBG,KAAKf,MAAMuB,SACR,uBAAGN,UAAU,aAAahB,EAAKF,MAC/B,2BACIU,KAAK,OACLe,SAAUT,KAAKX,kBACfE,KAAK,OACLE,MAAOO,KAAKjB,MAAMC,OAED,KAAxBgB,KAAKf,MAAMuB,SACR,6BAAsB,IAAhBtB,EAAKC,OAAe,uBAAGgB,MAAO,CAACO,MAAO,QAAlB,eAA4C,uBAAGP,MAAO,CAACO,MAAO,UAAlB,SACrE,gDACG,2BACIhB,KAAK,WACLQ,UAAU,OACVO,SAAUT,KAAKX,kBACfE,KAAK,SACLI,QAA+B,KAAtBK,KAAKjB,MAAMI,UAGP,KAAxBa,KAAKf,MAAMuB,SACR,6BAAK,4BAAQN,UAAU,wBAAlB,QAAL,KACA,a,GApDES,cCIbC,E,2MAIjBC,aAAe,SAAA3B,GACX,EAAKD,MAAM6B,WAAY5B,I,wEAGjB,IAAD,OACL,OACI,wBAAIgB,UAAU,iCACTF,KAAKf,MAAM8B,MAAMC,KAAI,SAAA9B,GAAI,OACtB,kBAAC,EAAD,eACIe,IAAKf,EAAKE,GACVF,KAAMA,GACF,EAAKD,MAHb,CAIII,kBAAmB,EAAKA,kBACxBU,cAAe,EAAKc,wB,GAjBNF,aCuBvBM,EAbI,SAAAhC,GACf,OACI,yBAAKiB,UAAU,iCACX,wBAAIA,UAAU,4BAjBT,SAACgB,EAAKC,EAAMC,GAEzB,IADA,IAAMC,EAAQ,GADoB,WAEzBC,GACL,IAAIC,EAAWJ,IAASG,EAAK,qBAAsB,YAEnDD,EAAMG,KACF,wBAAItB,UAAWqB,EAAStB,IAAKqB,GACzB,4BAAQpB,UAAU,YAAYuB,QAAS,kBAAML,EAAKE,KAAKA,MAL1DA,EAAI,EAAGA,GAAGI,KAAKC,KAAKT,EAAI,GAAII,GAAK,EAAI,EAArCA,GAST,OAAOD,EASSO,CAAS3C,EAAM4C,iBAAkB5C,EAAMkC,KAAMlC,EAAM6C,aCpBjEC,EAAgB,CAClB1B,SAAU,GACVC,MAAO,GACPtB,KAAM,IAGWgD,E,2MAEjBjD,M,eAAagD,G,EAEb1C,kBAAoB,SAAAC,GAChB,IAAMC,EAAOD,EAAEE,OAAOD,KAChBE,EAAQH,EAAEE,OAAOC,MAEvB,EAAKG,SAAL,eAAiBL,EAAOE,K,EAG5BoB,aAAe,SAAAvB,GAEX,GADAA,EAAEQ,kBACE,EAAKf,MAAMsB,WAAY,EAAKtB,MAAMC,MAA6B,KAArB,EAAKD,MAAMuB,MAAzD,CAFgB,MAIkB,EAAKvB,MAA/BsB,EAJQ,EAIRA,SAAUC,EAJF,EAIEA,MAAOtB,EAJT,EAISA,KAEzB,EAAKC,MAAMgD,cAAc,CACrB5B,WACAC,QACAtB,SAEJ,EAAKY,SAAL,eAAmBmC,M,wEAInB,OACI,0BAAM7B,UAAU,eAAeK,SAAUP,KAAKa,cAC1C,+CACA,yBAAKX,UAAU,cACf,2BAAOA,UAAU,OAAjB,WACI,2BACIO,SAAUT,KAAKX,kBACfK,KAAK,OACLQ,UAAU,eACVX,KAAK,WACL2C,UAAU,EACVzC,MAAOO,KAAKjB,MAAMsB,YAG1B,2BAAOH,UAAU,OAAjB,QACI,2BACIO,SAAUT,KAAKX,kBACfK,KAAK,QACLQ,UAAU,eACVX,KAAK,QACLE,MAAOO,KAAKjB,MAAMuB,SAG1B,2BAAOJ,UAAU,OAAjB,OACI,2BACIO,SAAUT,KAAKX,kBACfK,KAAK,OACLQ,UAAU,eACVX,KAAK,OACL2C,UAAU,EACVzC,MAAOO,KAAKjB,MAAMC,QAGtB,4BAAQkB,UAAU,mBAAlB,gB,GA3DoBS,aCNlCoB,EAAgB,CAClB1B,SAAU,GACV8B,SAAU,IAGOC,E,2MAEjBrD,M,eAAagD,G,EAEb1C,kBAAoB,SAAAC,GAChB,IAAMC,EAAOD,EAAEE,OAAOD,KAChBE,EAAQH,EAAEE,OAAOC,MAEvB,EAAKG,SAAL,eAAiBL,EAAOE,K,EAG5BoB,aAAe,SAAAvB,GAEX,GADAA,EAAEQ,kBACE,EAAKf,MAAMsB,UAAoC,KAAxB,EAAKtB,MAAMoD,SAAtC,CAFgB,MAIe,EAAKpD,MAA5BsB,EAJQ,EAIRA,SAAU8B,EAJF,EAIEA,SAElB,EAAKlD,MAAMoD,UAAU,CACjBhC,WACA8B,aAEJ,EAAKvC,SAAL,eAAmBmC,M,wEAInB,OACI,yBAAKO,aAAW,cAGgB,KAAxBtC,KAAKf,MAAMuB,SACP,uBAAGN,UAAU,yCAAb,iBACA,0BAAMK,SAAUP,KAAKa,aAAcX,UAAU,yCACzC,yBAAKA,UAAU,cACX,2BAAOA,UAAU,OAAjB,WACI,2BACIO,SAAUT,KAAKX,kBACfK,KAAK,OACLQ,UAAU,eACVX,KAAK,WACLE,MAAOO,KAAKjB,MAAMsB,YAI1B,2BAAOH,UAAU,OAAjB,WACI,2BACIO,SAAUT,KAAKX,kBACfK,KAAK,WACLQ,UAAU,eACVX,KAAK,WACLE,MAAOO,KAAKjB,MAAMoD,YAG1B,4BAAQjC,UAAU,mBAAlB,gB,GApDIS,aCGf4B,E,2MACnBxD,MAAQ,CACJgC,MAAO,GACPc,iBAAkB,KAClBV,KAAM,EACNqB,WAAY,KACZC,eAAgB,MAChBC,MAAO,I,EAeXC,QAAU,WACN,IAAIC,EAAG,qFAAiF,EAAK7D,MAAMoC,KAA5F,uBAA+G,EAAKpC,MAAMyD,WAA1H,2BAAuJ,EAAKzD,MAAM0D,gBACzKI,IACKC,IAAIF,GACJG,MAAK,SAAAC,GACF,EAAKpD,SAAS,CACVmB,MAAOiC,EAAIC,KAAKC,QAAQnC,Y,EAMxCe,SAAW,SAAAX,GACT0B,IACKC,IADL,qFACuF3B,IAClF4B,MAAK,SAAAC,GACJ,EAAKpD,SAAS,CACZmB,MAAOiC,EAAIC,KAAKC,QAAQnC,MACxBI,a,EAMVgC,aAAe,SAAA7D,GACT,IAAIC,EAAOD,EAAEE,OAAOD,KAChBE,EAAQH,EAAEE,OAAOC,MACvB,EAAKG,SAAL,eACOL,EAAQE,IAGf,EAAKkD,W,EAGTV,cAAgB,SAAA/C,GACZ,IAAMkE,EAAW,IAAIC,SACrBD,EAASE,OAAO,WAAYpE,EAAKmB,UACjC+C,EAASE,OAAO,QAASpE,EAAKoB,OAC9B8C,EAASE,OAAO,OAAQpE,EAAKF,MAC7B6D,IACCU,KAAK,8EACFH,EACA,CAACI,QAAQ,CAAC,eAAgB,yBACzBT,MAAK,YAAqB,IAAnB5D,EAAkB,EAAlBA,OAAkB,EAAV8D,KACI,MAAX9D,GACC,EAAKwD,c,EAKvBN,UAAY,SAAAoB,GACR,IAAML,EAAW,IAAIC,SACrBD,EAASE,OAAO,WAAYG,EAAKpD,UACjC+C,EAASE,OAAO,WAAYG,EAAKtB,UACjCU,IACKU,KAAK,6EACFH,EACA,CAACI,QAAQ,CAAC,eAAgB,yBAC7BT,MAAK,YAAqB,IAAnB5D,EAAkB,EAAlBA,OAAQ8D,EAAU,EAAVA,KACE,MAAX9D,GACC,EAAKS,SAAS,CACV8C,MAAOO,EAAKC,QAAQR,Y,EAMtC5B,WAAY,YAA0B,IAAvB3B,EAAsB,EAAtBA,OAAQH,EAAc,EAAdA,KAAMI,EAAQ,EAARA,GAEnBF,EAAO,EAAKH,MAAMgC,MAAM2C,MAAK,SAAAC,GAAC,OAAIA,EAAEvE,KAAOA,KAC3CwE,EAAY,eAAQ1E,EAAR,CAAcF,OAAMG,WAEhCiE,EAAW,IAAIC,SACrBD,EAASE,OAAO,QAAS,EAAKvE,MAAM2D,OACpCU,EAASE,OAAO,QAASM,EAAa5E,MACtCoE,EAASE,OAAO,UAAWM,EAAazE,QACxC0D,IACKU,KADL,kEACqEK,EAAaxE,GADlF,sBAEQgE,EACA,CAACI,QAAQ,CAAC,eAAgB,yBAC7BT,MAAK,YAAe,IAAb5D,EAAY,EAAZA,OACU,MAAXA,GACC0E,QAAQC,IAAI3E,O,mFA9FT,IAAD,OAClB0D,IACKC,IADL,yEAEKC,MAAK,SAAAC,GAEJ,EAAKpD,SAAS,CACZmB,MAAOiC,EAAIC,KAAKC,QAAQnC,MACxBc,iBAAkBkC,OAAOf,EAAIC,KAAKC,QAAQrB,yB,+BA6FlD,OACI,yBAAK3B,UAAU,aACb,yBAAKA,UAAU,OACX,yBAAKA,UAAU,UACX,kBAAC,EAAD,CAAQM,SAAUR,KAAKjB,MAAM2D,MAAOL,UAAWrC,KAAKqC,YACtD,wBAAInC,UAAU,eAAd,aACE,kBAAE,EAAF,CAAa+B,cAAejC,KAAKiC,iBAErC,yBAAK/B,UAAU,kBACX,2BAAOA,UAAU,UAAjB,cACI,4BACIA,UAAU,oCACVT,MAAOO,KAAKjB,MAAMyD,WAClBjD,KAAK,aACLkB,SAAUT,KAAKmD,cAEf,4BAAQ1D,MAAM,MAAd,MACA,4BAAQA,MAAM,YAAd,YACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,UAAd,aAKZ,yBAAKS,UAAU,kBACX,2BAAOA,UAAU,UAAjB,kBACI,4BAAQA,UAAU,oCACVT,MAAOO,KAAKjB,MAAM0D,eAClBlD,KAAK,iBACLkB,SAAUT,KAAKmD,cAEnB,4BAAQ1D,MAAM,OAAd,OACA,4BAAQA,MAAM,QAAd,WAKd,yBAAKS,UAAU,UAEb,kBAAC,EAAD,CACIa,MAAOf,KAAKjB,MAAMgC,MAClBP,SAAUR,KAAKjB,MAAM2D,MACrB5B,WAAYd,KAAKc,aAErB,kBAAC,EAAD,CACIe,iBAAkB7B,KAAKjB,MAAM8C,iBAC7BV,KAAMnB,KAAKjB,MAAMoC,KACjBW,SAAU9B,KAAK8B,kB,GA7JAnB,aCEbqD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,MAAK,SAAA6B,GACjCA,EAAaC,kB","file":"static/js/main.8678c4c6.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class Task extends Component {\r\n    state = {\r\n        text: this.props.task.text,\r\n        status: this.props.task.status,\r\n        id: this.props.task.id\r\n    };\r\n\r\n    handleInputChange = e => {\r\n        const name = e.target.name;\r\n        const value = e.target.type === 'checkbox' ? e.target.checked : e.target.value;\r\n\r\n        this.setState({ [name]: value });\r\n    };\r\n\r\n    handleEditSuccess = e => {\r\n        e.preventDefault();\r\n\r\n        this.props.onEditSuccess(this.state);\r\n    };\r\n\r\n    render () {\r\n        const {task} = this.props;\r\n        return (\r\n            <li key={task.id} className=\"m-2\">\r\n\r\n                <div className=\"card\" style={{width: \"18rem\"}}>\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title\">{task.username}</h5>\r\n                        <h6 className=\"card-subtitle mb-2 text-muted\">{task.email}</h6>\r\n                        <form onSubmit={this.handleEditSuccess}>\r\n\r\n                            {this.props.isLogged === '' ?\r\n                                <p className=\"card-text\">{task.text}</p> :\r\n                                <input\r\n                                    type=\"text\"\r\n                                    onChange={this.handleInputChange}\r\n                                    name=\"text\"\r\n                                    value={this.state.text}\r\n                                />}\r\n                            {this.props.isLogged === '' ?\r\n                                <div>{task.status === 0 ? <p style={{color: \"red\"}}>In progress</p> : <p style={{color: \"green\"}} >Done</p>}</div> :\r\n                                (<label >Task completed\r\n                                    <input\r\n                                        type=\"checkbox\"\r\n                                        className=\"ml-2\"\r\n                                        onChange={this.handleInputChange}\r\n                                        name=\"status\"\r\n                                        checked={this.state.status === 10 ? true : false}\r\n                                    />\r\n                                </label>)}\r\n                            {this.props.isLogged !== '' ?\r\n                                <div><button className=\"btn btn-primary mt-2\">Edit</button> </div>:\r\n                                null}\r\n                        </form>\r\n\r\n                    </div>\r\n                </div>\r\n\r\n\r\n\r\n\r\n            </li>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Task from \"../Task/task\";\r\n// const INITIAL_STATE = {\r\n//\r\n// };\r\n\r\nexport default class TaskList extends Component {\r\n\r\n\r\n\r\n    handleSubmit = task => {\r\n        this.props.updateTask( task);\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <ul className=\"d-flex justify-content-around\">\r\n                {this.props.tasks.map(task =>\r\n                    <Task\r\n                        key={task.id}\r\n                        task={task}\r\n                        {...this.props}\r\n                        handleInputChange={this.handleInputChange}\r\n                        onEditSuccess={this.handleSubmit}\r\n                    />\r\n                )}\r\n            </ul>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n","import React from \"react\";\r\n\r\nconst makePage = (max, page, func) => {\r\n    const pages = [];\r\n    for (let i = 1; i<=Math.ceil(max/3); i += 1) {\r\n        let classes = (page === i) ? \"page-item disabled\": \"page-item\";\r\n\r\n        pages.push(\r\n            <li className={classes} key={i} >\r\n                <button className=\"page-link\" onClick={() => func(i)}>{i}</button>\r\n            </li>\r\n        )\r\n    }\r\n    return pages;\r\n}\r\n\r\nconst Pagination = props => {\r\n    return (\r\n        <nav className=\"d-flex justify-content-center\">\r\n            <ul className=\"pagination pagination-sm\">\r\n                {\r\n\r\n                    makePage(props.total_task_count, props.page, props.pickPage)\r\n                }\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Pagination;\r\n","import React, { Component } from 'react';\r\n\r\nconst INITIAL_STATE = {\r\n    username: '',\r\n    email: '',\r\n    text: ''\r\n}\r\n\r\nexport default class CreateTask extends Component {\r\n\r\n    state = { ...INITIAL_STATE }\r\n\r\n    handleInputChange = e => {\r\n        const name = e.target.name;\r\n        const value = e.target.value;\r\n\r\n        this.setState({ [name]: value });\r\n    };\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        if (this.state.username && this.state.text && this.state.email === '') { return; }\r\n\r\n        const { username, email, text } = this.state;\r\n\r\n        this.props.createNewTask({\r\n            username,\r\n            email,\r\n            text\r\n        });\r\n        this.setState({ ...INITIAL_STATE });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form className=\"card m-4 p-4\" onSubmit={this.handleSubmit}>\r\n                <h2>Create New Task</h2>\r\n                <div className=\"form-group\">\r\n                <label className=\"m-2\">username\r\n                    <input\r\n                        onChange={this.handleInputChange}\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        name=\"username\"\r\n                        required={true}\r\n                        value={this.state.username}\r\n                    />\r\n                </label>\r\n                <label className=\"m-2\">email\r\n                    <input\r\n                        onChange={this.handleInputChange}\r\n                        type=\"email\"\r\n                        className=\"form-control\"\r\n                        name=\"email\"\r\n                        value={this.state.email}\r\n                    />\r\n                </label>\r\n                <label className=\"m-2\">text\r\n                    <input\r\n                        onChange={this.handleInputChange}\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        name=\"text\"\r\n                        required={true}\r\n                        value={this.state.text}\r\n                    />\r\n                </label>\r\n                    <button className=\"btn btn-primary\">Create</button>\r\n                </div>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nconst INITIAL_STATE = {\r\n    username: '',\r\n    password: '',\r\n}\r\n\r\nexport default class Navbar extends Component {\r\n\r\n    state = { ...INITIAL_STATE }\r\n\r\n    handleInputChange = e => {\r\n        const name = e.target.name;\r\n        const value = e.target.value;\r\n\r\n        this.setState({ [name]: value });\r\n    };\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        if (this.state.username && this.state.password === '') { return; }\r\n\r\n        const { username, password } = this.state;\r\n\r\n        this.props.userLogin({\r\n            username,\r\n            password\r\n        });\r\n        this.setState({ ...INITIAL_STATE });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <nav aria-label=\"breadcrumb\" >\r\n\r\n                {\r\n                    this.props.isLogged !== '' ?\r\n                        <p className=\"breadcrumb d-flex justify-content-end\">You logged in</p> :\r\n                        <form onSubmit={this.handleSubmit} className=\"breadcrumb d-flex justify-content-end\">\r\n                            <div className=\"form-group\">\r\n                                <label className=\"m-2\">username\r\n                                    <input\r\n                                        onChange={this.handleInputChange}\r\n                                        type=\"text\"\r\n                                        className=\"form-control\"\r\n                                        name=\"username\"\r\n                                        value={this.state.username}\r\n                                    />\r\n                                </label>\r\n\r\n                                <label className=\"m-2\">password\r\n                                    <input\r\n                                        onChange={this.handleInputChange}\r\n                                        type=\"password\"\r\n                                        className=\"form-control\"\r\n                                        name=\"password\"\r\n                                        value={this.state.password}\r\n                                    />\r\n                                </label>\r\n                                <button className=\"btn btn-primary\">Login</button>\r\n                            </div>\r\n\r\n                        </form>\r\n                }\r\n\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n","import React, { Component} from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport TaskList from \"./components/TasksList/tasksList\";\nimport Pagination from \"./components/Pagination/pagination\";\nimport CreateTask from \"./components/CreateTask/createTask\";\nimport Navbar from \"./components/Navbar/navbar\";\n\n\n\nexport default class App extends Component {\n  state = {\n      tasks: [],\n      total_task_count: null,\n      page: 1,\n      sort_field: \"id\",\n      sort_direction: \"asc\",\n      token: ''\n  }\n\n  componentDidMount() {\n    axios\n        .get(`https://uxcandy.com/~shapoval/test-task-backend/v2/?developer=Vitalii`)\n        .then(res => {\n\n          this.setState({\n            tasks: res.data.message.tasks,\n            total_task_count: Number(res.data.message.total_task_count)\n          })\n        })\n  }\n\n  getData = () => {\n      let url = `https://uxcandy.com/~shapoval/test-task-backend/v2/?developer=Vitalii&page=${this.state.page}&sort_field=${this.state.sort_field}&sort_direction=${this.state.sort_direction}`\n      axios\n          .get(url)\n          .then(res => {\n              this.setState({\n                  tasks: res.data.message.tasks,\n\n              })\n          })\n  }\n\n  pickPage = page => {\n    axios\n        .get(`https://uxcandy.com/~shapoval/test-task-backend/v2/?developer=Vitalii&page=${page}`)\n        .then(res => {\n          this.setState({\n            tasks: res.data.message.tasks,\n            page\n          })\n        })\n  }\n\n\n  changeSelect = e => {\n        let name = e.target.name;\n        let value = e.target.value;\n      this.setState({\n            [name] : value\n      })\n\n      this.getData()\n  }\n\n  createNewTask = task => {\n      const formData = new FormData();\n      formData.append(\"username\", task.username);\n      formData.append(\"email\", task.email);\n      formData.append(\"text\", task.text);\n      axios\n      .post('https://uxcandy.com/~shapoval/test-task-backend/v2/create?developer=Vitalii',\n          formData,\n          {headers:{'Content-Type': \"multipart/form-data\",}})\n          .then(({status, data}) => {\n                if(status === 200) {\n                    this.getData()\n                }\n          })\n  }\n\n  userLogin = user => {\n      const formData = new FormData();\n      formData.append(\"username\", user.username);\n      formData.append(\"password\", user.password);\n      axios\n          .post('https://uxcandy.com/~shapoval/test-task-backend/v2/login?developer=Vitalii',\n              formData,\n              {headers:{'Content-Type': \"multipart/form-data\",}})\n          .then(({status, data}) => {\n              if(status === 200) {\n                  this.setState({\n                      token: data.message.token\n                  })\n              }\n          })\n  }\n\n    updateTask =( {status, text, id}) => {\n\n        const task = this.state.tasks.find(t => t.id === id);\n        const taskToUpdate = { ...task, text, status  };\n\n        const formData = new FormData();\n        formData.append(\"token\", this.state.token);\n        formData.append(\"text \", taskToUpdate.text);\n        formData.append(\"status \", taskToUpdate.status);\n        axios\n            .post(`https://uxcandy.com/~shapoval/test-task-backend/v2/edit/${taskToUpdate.id}?developer=Vitalii`,\n                formData,\n                {headers:{'Content-Type': \"multipart/form-data\",}})\n            .then(({status}) => {\n                if(status === 200) {\n                    console.log(status);\n                }\n            })\n    };\n\n    render() {\n    return (\n        <div className=\"container\">\n          <div className=\"row\">\n              <div className=\"col-12\">\n                  <Navbar isLogged={this.state.token} userLogin={this.userLogin} />\n                <h1 className=\"text-center\">Tasks App</h1>\n                  < CreateTask createNewTask={this.createNewTask}/>\n              </div>\n              <div className=\"col-3 offset-9\">\n                  <label className=\"d-flex\"> sort_field\n                      <select\n                          className=\"form-control form-control-sm ml-2\"\n                          value={this.state.sort_field}\n                          name=\"sort_field\"\n                          onChange={this.changeSelect}\n                      >\n                          <option value=\"id\">id</option>\n                          <option value=\"username\">username</option>\n                          <option value=\"email\">email</option>\n                          <option value=\"status\">status</option>\n                      </select>\n                  </label>\n\n              </div>\n              <div className=\"col-3 offset-9\">\n                  <label className=\"d-flex\"> sort_direction\n                      <select className=\"form-control form-control-sm ml-2\"\n                              value={this.state.sort_direction}\n                              name=\"sort_direction\"\n                              onChange={this.changeSelect}\n                      >\n                          <option value=\"asc\">asc</option>\n                          <option value=\"desc\">desc</option>\n                      </select>\n                  </label>\n\n              </div>\n            <div className=\"col-12\">\n\n              <TaskList\n                  tasks={this.state.tasks}\n                  isLogged={this.state.token}\n                  updateTask={this.updateTask}\n              />\n              <Pagination\n                  total_task_count={this.state.total_task_count}\n                  page={this.state.page}\n                  pickPage={this.pickPage}\n              />\n            </div>\n          </div>\n        </div>\n    );\n  }\n};\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}